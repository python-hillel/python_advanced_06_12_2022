version: "3.9"

name: 'quiz'

services:
  web:
    build: .
    container_name: web
    # image: nkiseev/web:0.0.1
    command: gunicorn core.wsgi:application --workers 4 --bind 0.0.0.0:8890
    volumes:
      - static_volume:/opt/src/static
      - media_volume:/opt/src/media
    networks:
      - frontend
      - backend
    env_file:
      - .env_prod
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    healthcheck:
      test: curl --fail -s http://localhost:8890 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  db:
    build: ./postgres
    container_name: db
    # image: nkiseev/db:0.0.1
    volumes:
      - db_data_volume:/var/lib/postgresql/data/
    networks:
      - backend
    env_file:
      - .env_prod
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "quiz", "-U", "terminator"]
      interval: 30s
      timeout: 2s
      retries: 5
    restart: always

  nginx:
    build: ./nginx
    container_name: nginx
    # image: nkiseev/nginx:0.0.1
    volumes:
      - static_volume:/opt/src/static
      - media_volume:/opt/src/media
    networks:
      - frontend
    ports:
      - "80:80"
    depends_on:
      db:
        condition: service_healthy
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/usr/src/healthcheck.sh"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: always

  broker:
    image: rabbitmq:3.9.12-alpine
    container_name: broker
    volumes:
      - broker_volume:/var/lib/rabbitmq
    networks:
      - backend
    env_file:
      - .env_prod
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always

  worker:
    build: .
    container_name: worker
    command: sh -c "celery -A core worker --concurrency=20 --loglevel=info"
    networks:
      - backend
    env_file:
      - .env_prod
    depends_on:
      broker:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: always

  scheduler:
    build: .
    container_name: scheduler
    command: sh -c "celery -A core beat -l info"
    networks:
      - backend
    env_file:
      - .env_prod
    depends_on:
      broker:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: always

  backend:
    image: redis:6.2.6-alpine
    container_name: backend
    volumes:
      - backend_volume:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 20
    restart: always

  cache:
    image: redis:6.2.6-alpine
    container_name: cache
    volumes:
      - cache_volume:/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 20
    restart: always

volumes:
  db_data_volume:
    name: quiz_data
  static_volume:
    name: quiz_static
  media_volume:
    name: quiz_media
  broker_volume:
    name: quiz_broker
  backend_volume:
    name: quiz_backend
  cache_volume:
    name: quiz_cache


networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
